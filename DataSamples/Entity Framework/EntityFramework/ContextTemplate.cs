//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生意外行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.EntityClient;
using System.Data.Objects;
using System.Diagnostics.CodeAnalysis;
using EmployeeTracker.Common;
using EmployeeTracker.Model;

namespace EmployeeTracker.EntityFramework
{
    #region 上下文
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    [SuppressMessage("Microsoft.Design", "CA1063:ImplementIDisposableCorrectly", Justification = "IDisposable is specified by IEmployeeContext and the implementation is inherited from ObjectContext")]
    public partial class EmployeeEntities : ObjectContext, IEmployeeContext
    {
        #region 构造函数
        /// <summary>
        /// 使用应用程序配置文件的“EmployeeEntities”部分中的连接字符串，初始化新的 EmployeeEntities 对象。
        /// </summary>
        public EmployeeEntities() : base("name=EmployeeEntities", "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 EmployeeEntities 对象。
        /// </summary>
        public EmployeeEntities(string connectionString) : base(connectionString, "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 EmployeeEntities 对象。
        /// </summary>
        public EmployeeEntities(EntityConnection connection) : base(connection, "EmployeeEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
        #endregion
    	
        #region 分部方法
        partial void OnContextCreated();
        #endregion
    	
        #region IEmployeeContext
    	
    	/// <summary>
        /// 将所有挂起更改保存到数据上下文
        /// </summary>
        public void Save()
        {
            this.SaveChanges();
        }
    	
    	/// <summary>
        /// 检查是否在此数据上下文中跟踪所提供的对象
        /// </summary>
        /// <param name="obj">要检查的对象</param>
        /// <returns>如果跟踪该对象，则为 true，否则为 false</returns>
        public bool IsObjectTracked(object entity)
        {
            ObjectStateEntry ose;
            return this.ObjectStateManager.TryGetObjectStateEntry(entity, out ose);
        }
    	
        #endregion
        
        #region ObjectSet 属性
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public IObjectSet<ContactDetail> ContactDetails
        {
            get
            {
                if ((_ContactDetails == null))
                {
                    _ContactDetails = base.CreateObjectSet<ContactDetail>("ContactDetails");
                }
                return _ContactDetails;
            }
        }
        private ObjectSet<ContactDetail> _ContactDetails;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public IObjectSet<Department> Departments
        {
            get
            {
                if ((_Departments == null))
                {
                    _Departments = base.CreateObjectSet<Department>("Departments");
                }
                return _Departments;
            }
        }
        private ObjectSet<Department> _Departments;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public IObjectSet<Employee> Employees
        {
            get
            {
                if ((_Employees == null))
                {
                    _Employees = base.CreateObjectSet<Employee>("Employees");
                }
                return _Employees;
            }
        }
        private ObjectSet<Employee> _Employees;
    
        #endregion
        #region AddTo 方法
            
        /// <summary>
        /// 用于向 ContactDetails EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToContactDetails(ContactDetail contactDetail)
        {
            base.AddObject("ContactDetails", contactDetail);
        }
            
        /// <summary>
        /// 用于向 Departments EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToDepartments(Department department)
        {
            base.AddObject("Departments", department);
        }
            
        /// <summary>
        /// 用于向 Employees EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToEmployees(Employee employee)
        {
            base.AddObject("Employees", employee);
        }
        #endregion
    }
    
    #endregion
}
